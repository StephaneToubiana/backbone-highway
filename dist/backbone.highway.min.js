!function(window,factory){"use strict";"function"==typeof define&&define.amd?define(["backbone","underscore"],function(Backbone,_){return factory(window,Backbone||window.Backbone,_||window._)}):"object"==typeof exports?module.exports=factory(window,require("Backbone"),require("underscore")):factory(window,window.Backbone,window._)}(this,function(window,Backbone,_){"use strict";var localStorage=window.localStorage,router=null,routes={},extendedRoutes={},controller={},extendedController={},closeControllers={},cachedTriggers=[],defaultOptions={pushState:!0,root:"",hashChange:!0,silent:!1,dispatcher:null,authenticated:!1,redirectToLogin:!1,routes:{login:"login",error404:"404",error403:"403"},storePrefix:"backbone-highway",debug:!1,log:function(){this.debug&&window.console&&window.console.log&&window.console.log.apply(window.console,arguments)}};return Backbone.Highway={dispatcher:null,currentRoutes:[],start:function(options){var self=this;this.options=_.extend({},defaultOptions,options),this.options.routes=_.extend({},defaultOptions.routes,this.options.routes),this.dispatcher=this.options.dispatcher;var methods=_.filter(["trigger"],function(method){return _.isFunction(self.dispatcher[method])});if(_.isEmpty(methods))throw"[Backbone.Highway.start] Missing a correctdispatcher object, needs to be an instance of Backbone.Events";this.options.log("[Backbone.Highway.start] Starting router");var Router=Backbone.Router.extend(_.extend({},controller,{routes:routes}));if(router=new Router,!Backbone.History.started){this.options.log("[Backbone.Highway.start] Starting Backbone.history ("+(this.options.root?"root: "+this.options.root:"empty root url")+")");var existingRoute=Backbone.history.start({pushState:this.options.pushState,root:this.options.root,hashChange:this.options.hashChange,silent:this.options.silent});if(existingRoute||this.options.silent){var storedRoute=this.getStoredRoute();storedRoute&&(this.options.log("[Backbone.Highway] Loaded stored route: "+storedRoute),this.clearStore(),this.go({path:storedRoute}))}else this.options.log("[Backbone.Highway] Inexisting load route"),this.processControllers(self.options.routes.error404,[self.options.pushState?window.location.pathname.substring(1):window.location.hash.substring(1)])}},map:function(routesDefiner){_.isFunction(routesDefiner)?routesDefiner.call(this):this.options.log("[Backbone.Highway.map] Missing routes definer method as the first param")},route:function(name,def){var self=this,routesExtension={},controllerExtension={},currentName=name;if(!_.isObject(def))throw"[Backbone.Highway.route] Route definition needs to be an object";def.path&&"/"===def.path.charAt(0)&&(def.path=def.path.substring(1)),def.path&&routes[def.path]?name=routes[def.path]:(extendedRoutes[def.path]=[],extendedController[name]={re:def.path?Backbone.Router.prototype._routeToRegExp(def.path):null,wrappers:[]},routesExtension[def.path]=name,controllerExtension[name]=function(){self.processControllers(name,arguments)},_.extend(routes,routesExtension),_.extend(controller,controllerExtension),null!==router&&router.route(def.path,name,controllerExtension[name])),def.close&&(closeControllers[currentName]=def.close);var controllerWrapper=function(args,trigger){return trigger||self.currentRoutes.push(currentName),!_.isUndefined(def.authenticated)&&(def.authenticated&&!self.options.authenticated||!def.authenticated&&self.options.authenticated)?(self.options.redirectToLogin&&!self.options.authenticated?(self.options.log("[Backbone.Highway] Secured page, redirecting to login"),self.storeCurrentRoute(),self.processControllers(self.options.routes.login)):(self.options.log('[Backbone.Highway] Skipping route "'+currentName+'", '+(self.options.authenticated?"already ":"not ")+"logged in"),this.processControllers(self.options.routes.error403,[self.options.pushState?window.location.pathname.substring(1):window.location.hash.substring(1)])),!1):_.isString(def.action)?(self.options.log('[Backbone.Highway] Caught alias route: "'+currentName+'" >> "'+def.action+'"'),self.processControllers(def.action,args,!0),!1):(self.options.log('[Backbone.Highway] Executing route named "'+currentName+'"'),_.isEmpty(def.before)||self.processTriggers(def.before),_.isFunction(def.action)&&def.action.apply(self,args),void(_.isEmpty(def.after)||self.processTriggers(def.after)))};extendedRoutes[def.path].push(currentName),extendedController[name].wrappers.push(controllerWrapper),name!==currentName&&(extendedController[currentName]={re:null,wrappers:[controllerWrapper]})},go:function(name,args,options){var route=null,path=null;if(_.isObject(name)&&(route=name,name=route.name,path=_.isString(route.path)&&"/"===route.path.charAt(0)?route.path.substring(1):route.path,args=route.args||args),!name&&!path)return this.options.log("[Backbone.Highway.go] Missing parameters, name or path is necessary"),!1;if(!(name&&!this.exists({name:name})||path&&!this.exists({path:path}))){var continueProcess=!0,self=this;return _.forEach(this.currentRoutes,function(route){_.isFunction(closeControllers[route])&&name!==route&&(continueProcess=closeControllers[route].call(self,name,args,options))}),continueProcess?(this.currentRoutes=[],options=_.extend({trigger:!0,replace:!1},options),path||(path=this.path(name,args)),path!==!1&&router.navigate(path,options),!0):!1}this.options.log("[Backbone.Highway] Inexisting route name: "+name),this.processControllers(this.options.routes.error404,[this.options.pushState?window.location.pathname.substring(1):window.location.hash.substring(1)])},processTriggers:function(triggers){var self=this;_.isArray(triggers)?_.forEach(triggers,function(trigger){self.processTrigger(trigger)}):_.isString(triggers)||_.isObject(triggers)?this.processTrigger(triggers):this.options.log("[Backbone.Highway.processTriggers] Bad triggers format, needs to be a string, an object, an array of strings or an array of objects")},processTrigger:function(trigger){if(_.isObject(trigger)){var args=[trigger.name];if(trigger.cache){var cache=this.findCachedTrigger(trigger);if(cache.done)return void this.options.log("[Backbone.Highway] Trigger [ "+trigger.name+" ] has been skipped (cached)");cache.done=!0}if(this.exists({name:trigger.name}))return void this.processControllers(trigger.name,trigger.args||null,!0);_.isArray(trigger.args)||(trigger.args=[trigger.args]),_.forEach(trigger.args,function(arg){args.push(arg)}),this.dispatcher.trigger.apply(this.dispatcher,args)}else _.isString(trigger)?this.exists({name:trigger})?this.processControllers(trigger,null,!0):this.dispatcher.trigger.call(this.dispatcher,trigger):this.options.log("[Backbone.Highway.processTrigger] Bad trigger format, needs to be a string or an object, given: "+typeof trigger)},processControllers:function(name,args,trigger){var self=this;trigger=trigger||!1,_.isUndefined(args)||_.isNull(args)?args=[]:_.isObject||_.isArray(args)||(args=[args]),extendedController[name]?_.forEach(extendedController[name].wrappers,function(callback){callback.call(self,args,trigger)}):this.options.log("[Backbone.Highway.processControllers] Inexisting controller: "+name)},findCachedTrigger:function(trigger){var cache=_.find(cachedTriggers,function(item){return item.name===trigger.name});return cache?cache:(cachedTriggers.push(_.extend({},trigger)),this.findCachedTrigger(trigger))},clearCache:function(){cachedTriggers=[]},path:function(routeName,args){var path;for(path in routes)if(routes[path]===routeName)return this.parse(path,args);return!1},exists:function(params){if(!_.isObject(params))return!1;if(params.name)return!_.isUndefined(extendedController[params.name]);if(params.path){var name=null;for(name in extendedController)if(extendedController[name].re&&extendedController[name].re.test(params.path))return!0}return!1},parse:function(path,args){if(!_.isArray(args)||_.isEmpty(args))return path;var argIndex=0;return _.map(path.split("/"),function(part){if(":"===part.charAt(0)){var arg=args[argIndex];return argIndex+=1,arg}return part}).join("/").replace("(","").replace(/\/$/,"")},storeCurrentRoute:function(){var path=this.options.pushState?window.location.pathname:window.location.hash;path=path.substring(1),this.options.log("[Backbone.Highway] Storing current path: "+path),localStorage&&localStorage.setItem("backbone-router:path",path)},getStoredRoute:function(){return localStorage&&localStorage.getItem("backbone-router:path")},clearStore:function(){localStorage&&localStorage.removeItem("backbone-router:path")},on:function(){router.on.apply(router,arguments)},off:function(){router.off.apply(router,arguments)}},Backbone.Highway});