{"name":"Backbone-highway","tagline":"Routing Backbone with style \\o/","body":"```Backbone.Highway``` wraps the ```Backbone.Router``` to simplify its use and bring new functionalities\r\n\r\nIts structure and API is inspired by routers in the Node.js frameworks: Meteor and ExpressJS.\r\n\r\nAdded functionalities compared to the ```Backbone.Router``` are:\r\n\r\n * Multiple controllers for the same path\r\n * Before and After triggers distributed using an event aggregator\r\n * Simple trigger cache managing\r\n * Aliasing between routes\r\n * \"Secured\" routes\r\n * Close action (similar to onbeforeunload)\r\n\r\n## Installation\r\n\r\nYou can install the library via bower:\r\n\r\n```\r\nbower install backbone-highway\r\n```\r\n\r\n## Dependencies and structure\r\n\r\nThe dependencies are:\r\n\r\n - Backbone >= 1.1.4\r\n - Underscore >= 1.4.4\r\n\r\nUntil now the library was overriding the ```Backbone.Router``` namespace. I now understand that this was a huge mistake as it was breaking the dependencies of other Backbone libraries by replacing the core API. Thus the new name ```Backbone.Highway```\r\n\r\n## General use\r\n\r\nDeclaring routes goes through executing a simple method: ```Backbone.Highway.map();```\r\n\r\nThis method takes a function as its only parameter which will be executed in the router's context to access the internal API easily. A route consists of a unique name and an object to describe the route's action.\r\n\r\nLet's just jump right in with an example:\r\n\r\n```javascript\r\n// Create an app object containing an\r\n// instance of Backbone.Events\r\nvar App = {\r\n  events: _.extend({}, Backbone.Events)\r\n};\r\n\r\n// Start route declarations\r\nBackbone.Highway.map(function () {\r\n  // Declare a route named 'home'\r\n  this.route('home', {\r\n    // The url to which the route will respond\r\n    path: '/',\r\n\r\n    // Method to be executed when the given path is intercepted\r\n    action: function () {\r\n      // Do something fantastic \\o/\r\n    }\r\n  });\r\n\r\n  // Declare other routes...\r\n});\r\n\r\n// Wait for document ready event\r\n$(function () {\r\n  // Start the router passing a global event aggregator\r\n  Backbone.Highway.start({\r\n    dispatcher: App.events\r\n  });\r\n});\r\n```\r\n\r\n## Start routing\r\n\r\nThe router has to be started via the ```start``` method.\r\nIt receives an ```options``` object containing at least a ```dispatcher``` \r\n\r\nParameters:\r\n\r\n - Options (Object) - Override default router configuration\r\n\r\nThese are the default options :\r\n\r\n```javascript\r\n/**\r\n * Default options that are extended when the router is started\r\n * @type {Object}\r\n */\r\nvar defaultOptions = {\r\n  // --- Backbone History options ---\r\n  // Docs: http://backbonejs.org/#History\r\n\r\n  // Use html5 pushState\r\n  pushState: true,\r\n\r\n  // Root url\r\n  root: '',\r\n\r\n  // Set to false to force page reloads for old browsers\r\n  hashChange: true,\r\n\r\n  // Don't trigger the initial route\r\n  silent: false,\r\n\r\n  // --------------------------------\r\n\r\n  // Event aggregator used to dispatch triggers.\r\n  // Highway will not work without at least an instance of Backbone.Events\r\n  // Also accepts an instance of Backbone.Wreqr or any object containing a 'trigger' method.\r\n  dispatcher: null,\r\n\r\n  // The current user status, logged in or not\r\n  authenticated: false,\r\n\r\n  // Enable automatic execution of a login route when accessing a secured routes\r\n  redirectToLogin: false,\r\n\r\n  // Names of automatically executed routes\r\n  routes: {\r\n    login: 'login',\r\n    error404: '404',\r\n    error403: '403'\r\n  }\r\n\r\n  // Print out debug information\r\n  debug: false,\r\n\r\n  // Override log method\r\n  log: function () {\r\n    if (this.debug && window.console && window.console.log) {\r\n      window.console.log.apply(window.console, arguments);\r\n    }\r\n  }\r\n};\r\n```\r\n\r\nExample of overriding the default options :\r\n\r\n\r\n```javascript\r\n// Create app\r\nvar App = {\r\n  events: _.extend({}, Backbone.Events)\r\n};\r\n\r\n// Define some routes ...\r\n\r\n// Start the router passing an options object\r\nBackbone.Highgway.start({\r\n  dispatcher: App.events,\r\n\r\n  // Root url for all routes, passed to Backbone.history\r\n  root: '/admin',\r\n\r\n  // Activate html5 pushState or not, true by default\r\n  pushState: false,\r\n\r\n  // Whether the user is currently logged in or not\r\n  authenticated: true,\r\n\r\n  // If not logged in, redirect the user to a route named \"login\"\r\n  redirectToLogin: true,\r\n\r\n  // Print out routing debug information to the console\r\n  debug: true\r\n});\r\n```\r\n\r\n## Router go!\r\n\r\nTo redirect the user to a certain route when, for example, he clicks a link simply use the ```go``` method.\r\n\r\n```javascript\r\nBackbone.Highway.go('home');\r\n```\r\n\r\n**Parameters**\r\n\r\n - name (Mixed): The route name to execute or an object describing the route.\r\n - args (Mixed): Array of arguments, can also be a function's ```arguments``` object.\r\n - options (Object): Passed to the Backbone.Router navigate method. Defaults to ```{ trigger: true, replace: false }```\r\n\r\nLet's define a route that takes a parameter:\r\n\r\n```javascript\r\nBackbone.Highway.map(function () {\r\n  // Declare a user profile page\r\n  this.route('user.profile', {\r\n    path: '/user/:id',\r\n    action: function(userId) {\r\n      // Render user profile page\r\n    }\r\n  });\r\n})\r\n```\r\n\r\nConsidering the current page contains a link like this:\r\n\r\n```javascript\r\n<a href=\"/user/42\" class=\"profile\" data-id=\"42\">Your profile!</a>\r\n```\r\n\r\nWe could write a script (using jquery) to redirect the user like so:\r\n\r\n```javascript\r\n// Intercept the user click\r\n$('a.profile').click(function (e) {\r\n  e.preventDefault();\r\n\r\n  var userId = $(this).attr('data-id');\r\n\r\n  // Redirecting to route named 'user.profile' passing an id\r\n  Backbone.Highway.go('user.profile', [userId]);\r\n});\r\n```\r\n\r\nAs the first parameter to the ```go``` method can be an object, we could also write the previous script in this manner:\r\n\r\n```javascript\r\n// Intercept the user click\r\n$('a.profile').click(function (e) {\r\n  e.preventDefault();\r\n\r\n  // Redirecting to route using the path defined in the href attribute\r\n  Backbone.Highway.go({\r\n    path: $(this).attr('href')\r\n  });\r\n});\r\n```\r\n\r\n\r\n## Route declaration parameters\r\n\r\nThe ```path``` and ```action``` parameters are the base of a route. But a few more parameters exist to extend the control of the route.\r\n\r\n```javascript\r\n// Definition object for a route named 'user.edit'\r\n{\r\n  // Path with an 'id' parameter\r\n  path: '/user/:id/edit',\r\n\r\n  // Route will only be executed if the user is logged in\r\n  authenticated: true,\r\n\r\n  // Execute triggers before the 'action' controller\r\n  before: [\r\n    { name: 'core.display', cache: true },\r\n    'users:display'\r\n  ],\r\n\r\n  // Main controller for the route\r\n  action: function (userId) {\r\n    // Render a user edit form\r\n  },\r\n\r\n  // Execute triggers after the 'action' controller\r\n  after: [\r\n    'core.postTriggers'\r\n  ],\r\n\r\n  // Executed when user is routed away from this route\r\n  // similar to an 'onbeforeunload' event\r\n  close: function () {\r\n    // Return false to cancel the routing\r\n    return confirm('Are you sure you want to leave this page?');\r\n  }\r\n}\r\n```\r\n\r\n### Catching client-side 404 and 403\r\n\r\nA route named 404 can be declared to catch all non-existent routes.\r\nIn the same way a route can be named 403 to catch accessing restricted routes.\r\n\r\n```javascript\r\nBackbone.Highway.map(function () {\r\n  // 404 controller\r\n  this.route('404', {\r\n    action: function (path) {\r\n      // Couldn't find what you're looking for =/\r\n    }\r\n  });\r\n\r\n  // 403 controller\r\n  this.route('403', {\r\n    action: function (path) {\r\n      // Sorry you can't access this content =(\r\n    }\r\n  });\r\n});\r\n```\r\n\r\nFor convenience, the action methods will receive the current ```window.location.pathname``` as the first argument.\r\n\r\nThe 404 controller will also be executed when a non-existent route is called with the ```go``` method.\r\n\r\nThe 403 controller will only be executed if the ```redirectToLogin``` option is set to ```false```.\r\n\r\n## Events distribution (Triggers)\r\n\r\nTo distribute the triggers declared in the ```before``` and ```after``` parameters ```Backbone.Highway``` uses an instance of any Backbone like event aggregator. It has only been tested with ```Backbone.Events``` and ```Backbone.Wreqr```.\r\n\r\n```Backbone.Highway``` only tests if the passed object has a ```trigger``` method. So it could be anything you like.\r\n\r\n```javascript\r\n// Create app with instace of Backbone.Events\r\nvar App = {\r\n  events: _.extend({}, Backbone.Events)\r\n};\r\n\r\n// Start the router\r\nBackbone.Highway.start({\r\n  dispatcher: App.events\r\n});\r\n```\r\n\r\n## Trigger declaration\r\n\r\nTriggers can be declared in different ways.\r\n\r\nThey can be a simple ```String``` for the simple ones:\r\n\r\n```javascript\r\n{\r\n  // ...\r\n  before: [\r\n    'core',\r\n    'module',\r\n    'submodule'\r\n  ],\r\n  // ...\r\n}\r\n```\r\nThey can also be declared as an ```Object``` with different parameters:\r\n\r\n```javascript\r\n{\r\n  // ...\r\n  before: [\r\n    { name: 'core', cache: true },\r\n    { name: 'module', args: ['foo', 'bar'] },\r\n    'submodule'\r\n  ],\r\n  // ...\r\n}\r\n```\r\n\r\n**Most importantly:** Each declared route becomes a trigger itself so that routes can build on each other.\r\n\r\n## Secured routes\r\n\r\nEach route can receive an ```authenticated``` boolean parameter to declare if the route should be interpreted when the user is logged in or not.\r\n\r\n```javascript\r\nBackbone.Highway.map(function() {\r\n  // Declare secure route\r\n  this.route('admin.users', {\r\n    path: '/admin/users',\r\n    authenticated: true,\r\n    action: function () {\r\n      // Display list of users\r\n    }\r\n  });\r\n});\r\n```\r\nTo make a route be interpreted in both cases (i.e. when the user is logged in or logged out),\r\nsimply leave out the ```authenticated``` parameter in the route declaration.\r\n\r\n**Important**\r\n\r\nOnly the server has the authority to tell if a connected client is a logged in user or not.\r\nSo for this system to actually work, the server has to print out a small piece of JavaScript to tell the router the current client's state:\r\n\r\n```php\r\n<script type=\"text/javascript\" src=\"backbone.highway.js\"></script>\r\n<script type=\"text/javascript\">\r\nwindow.LOGGED_IN = <?php if ($_SESSION['logged_in']): ?>true<?php else: ?>false<?php endif; ?>;\r\n\r\n$(funtion() {\r\n  // Starting the router telling it if the user is logged in or not\r\n  Backbone.Highway.start(App, {\r\n    authenticated: window.LOGGED_IN\r\n  });\r\n});\r\n</script>\r\n```\r\n\r\n\r\n## Demo / Example\r\n\r\nA demo is available in the ```demo``` folder.\r\n\r\nUse npm and bower to install dependencies and grunt to launch the demo server.\r\n\r\n\r\n```\r\n~/backbone-highway$ npm install && bower install\r\n~/backbone-highway$ grunt serve\r\n```\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 d4f\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}