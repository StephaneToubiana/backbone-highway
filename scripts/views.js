// templates/api.dust
(function(){dust.register("templates/api",body_0);function body_0(chk,ctx){return chk.w("<section id=\"main_content\" class=\"api-documentation\">\n  <h2>API documentation</h2>\n\n  <nav class=\"subnav\">\n    <div class=\"section\">\n      <div class=\"title\">\n        Public API\n      </div>\n      <ul>\n        <li>\n          <a href=\"/api/clearCache\" data-route=\"api\" data-args=\"clearCache\">\n            <span>clearCache</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/map\" data-route=\"api\" data-args=\"map\">\n            <span>declare</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/map\" data-route=\"api\" data-args=\"map\">\n            <span>define</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/go\" data-route=\"api\" data-args=\"go\">\n            <span>go</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/map\" data-route=\"api\" data-args=\"map\">\n            <span>map</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/backbone-methods\" data-route=\"api\" data-args=\"backbone-methods\">\n            <span>off</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/backbone-methods\" data-route=\"api\" data-args=\"backbone-methods\">\n            <span>on</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/route\" data-route=\"api\" data-args=\"route\">\n            <span>route</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/start\" data-route=\"api\" data-args=\"start\">\n            <span>start</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/backbone-methods\" data-route=\"api\" data-args=\"backbone-methods\">\n            <span>trigger</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"section\">\n      <div class=\"title\">\n        Private API\n      </div>\n      <ul>\n        <li>\n          <a href=\"/api/_applyStoredRoute\" data-route=\"api\" data-args=\"_applyStoredRoute\">\n            <span>_applyStoredRoute</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_cacheTrigger\" data-route=\"api\" data-args=\"_cacheTrigger\">\n            <span>_cacheTrigger</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_checkPath\" data-route=\"api\" data-args=\"_checkPath\">\n            <span>_checkPath</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_clearStore\" data-route=\"api\" data-args=\"_clearStore\">\n            <span>_clearStore</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_exists\" data-route=\"api\" data-args=\"_exists\">\n            <span>_exists</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_extractParameters\" data-route=\"api\" data-args=\"_extractParameters\">\n            <span>_extractParameters</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_findCachedTrigger\" data-route=\"api\" data-args=\"_findCachedTrigger\">\n            <span>_findCachedTrigger</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_getStoredRoute\" data-route=\"api\" data-args=\"_getStoredRoute\">\n            <span>_getStoredRoute</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_getStoreKey\" data-route=\"api\" data-args=\"_getStoreKey\">\n            <span>_getStoreKey</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_hasDispatcher\" data-route=\"api\" data-args=\"_hasDispatcher\">\n            <span>_hasDispatcher</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_httpError\" data-route=\"api\" data-args=\"_httpError\">\n            <span>_httpError</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_isValidArgsArray\" data-route=\"api\" data-args=\"_isValidArgsArray\">\n            <span>_isValidArgsArray</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_name\" data-route=\"api\" data-args=\"_name\">\n            <span>_name</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_parse\" data-route=\"api\" data-args=\"_parse\">\n            <span>_parse</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_path\" data-route=\"api\" data-args=\"_path\">\n            <span>_path</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_processControllers\" data-route=\"api\" data-args=\"_processControllers\">\n            <span>_processControllers</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_processTrigger\" data-route=\"api\" data-args=\"_processTrigger\">\n            <span>_processTrigger</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_processTriggers\" data-route=\"api\" data-args=\"_processTriggers\">\n            <span>_processTriggers</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_replaceArg\" data-route=\"api\" data-args=\"_replaceArg\">\n            <span>_replaceArg</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_routeToRegExp\" data-route=\"api\" data-args=\"_routeToRegExp\">\n            <span>_routeToRegExp</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_sanitizeArgs\" data-route=\"api\" data-args=\"_sanitizeArgs\">\n            <span>_sanitizeArgs</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_startHistory\" data-route=\"api\" data-args=\"_startHistory\">\n            <span>_startHistory</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_storeCurrentRoute\" data-route=\"api\" data-args=\"_storeCurrentRoute\">\n            <span>_storeCurrentRoute</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"/api/_stripHeadingSlash\" data-route=\"api\" data-args=\"_stripHeadingSlash\">\n            <span>_stripHeadingSlash</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  </nav>\n\n  <div data-ui=\"api-content\">\n    <h3>Welcome to the API documentation</h3>\n    <p>\n      Here you will learn about <code class=\"language-javascript\">Backbone.Highway</code>'s intricacies. All the information you always dreamed about can be found.\n      If you can't find the information you're looking for, don't worry, just open an issue on the <a href=\"https://github.com/d4f/backbone-highway\">github page</a>\n      or send me an email at <a href=\"mailto:rascarlito@gmail.com\">rascarlito@gmail.com</a>\n    </p>\n    <p>\n      Most importantly, have fun!\n    </p>\n  </div>\n</section>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/footer.dust
(function(){dust.register("templates/footer",body_0);function body_0(chk,ctx){return chk.w("<span class=\"author\">\n  Made with &hearts; by <a href=\"https://github.com/d4f\">@d4f</a>\n</span>\n<span class=\"license\">\n  <a href=\"https://www.google.fr/search?q=mit%20license\">MIT License</a>\n</span>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/getting-started.dust
(function(){dust.register("templates/getting-started",body_0);function body_0(chk,ctx){return chk.w("<section id=\"main_content\">\n  <h2>\n    <a id=\"installation\" class=\"anchor\" href=\"#installation\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Installation\n  </h2>\n  <p>You can install the library via bower:</p>\n  <pre><code class=\"language-javascript\">bower install backbone-highway</code></pre>\n  <p>or via npm:</p>\n  <pre><code class=\"language-javascript\">npm install backbone-highway</code></pre>\n\n  <h2>\n    <a id=\"dependencies\" class=\"anchor\" href=\"#dependencies\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Dependencies\n  </h2>\n\n  <ul>\n    <li>Backbone >= 1.1.4</li>\n    <li>Underscore &gt;= 1.4.4 </li>\n  </ul>\n\n  <h2>\n    <a id=\"general-use\" class=\"anchor\" href=\"#general-use\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Start routing\n  </h2>\n  <p>Declaring routes goes through executing a simple method: <code class=\"language-javascript\">Backbone.Highway.route();</code></p>\n  <p>\n    This method takes two parameters, a unique name and an object describing the route's action.\n  </p>\n  <p>When all the routes are declared we need to start the router with the <code class=\"language-javascript\">Backbone.Highway.start();</code> method.</p>\n  <p>Let's just jump right in with an example:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Declare a route named 'home'\nBackbone.Highway.route('home', {\n  // The route URL\n  path: '/',\n\n  // Controller method\n  action: function () {\n    // Do something fantastic \\o/\n  }\n});\n\n// Wait for document ready event\n$(function () {\n  // Start the router\n  Backbone.Highway.start();\n});</code></pre>\n\n  <h2>\n    <a id=\"router-go\" class=\"anchor\" href=\"#router-go\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Router go!\n  </h2>\n  <p>To redirect the user to a certain route when, for example, he clicks a link simply use the <code class=\"language-javascript\">go</code> method.</p>\n\n  <pre><code class=\"language-javascript\">Backbone.Highway.go('home');</code></pre>\n\n  <p>Let's define a route that takes a parameter:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Declare a user profile page\nBackbone.Highway.route('user.profile', {\n  path: '/user/:id',\n  action: function (userId) {\n    // Render user profile page\n  }\n});</code></pre>\n\n  <p>Considering the current page contains a link like this:</p>\n\n  <pre><code class=\"language-markup\">&lt;a href=\"/user/42\" class=\"profile\" data-id=\"42\"&gt;Your profile!&lt;/a&gt;</code></pre>\n\n  <p>We could write a script (using jquery) to redirect the user:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Intercept the user click\n$('a.profile').click(function (e) {\n  e.preventDefault();\n\n  var userId = $(this).attr('data-id');\n\n  // Redirecting to route named 'user.profile' passing an id\n  Backbone.Highway.go('user.profile', [userId]);\n});</code></pre>\n\n  <p>As the first parameter to the <code class=\"language-javascript\">go</code> method can be an object, we could also write the previous script like this:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Intercept the user click\n$('a.profile').click(function (e) {\n  e.preventDefault();\n\n  // Redirecting to route using the path defined in the href attribute\n  Backbone.Highway.go({ path: $(e.currentTarget).attr('href') });\n});</code></pre>\n\n  <h2>\n    <a id=\"events-distribution-triggers\" class=\"anchor\" href=\"#events-distribution-triggers\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a> Triggers (Events distribution)\n  </h2>\n  <p>\n    Triggers declared in the <code class=\"language-javascript\">before</code> and <code class=\"language-javascript\">after</code>\n    route parameters are dispatched when the route is executed using an event aggregator such as <code class=\"language-javascript\">Backbone.Events</code> or <code class=\"language-javascript\">Backbone.Wreqr</code>.<br>\n    The event aggregator instance needs to be passed to Backbone.Highway in the start options.\n  </p>\n\n\n  <p>\n    Using Backbone.Events:\n  </p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\nvar events = _.extend({}, Backbone.Events);\n\nBackbone.Highway.start({\n  dispatcher: events\n});</code></pre>\n\n  <p>\n    Using Marionette's instance of Backbone.Wreqr:\n  </p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\nvar App = new Backbone.Marionette.Application();\nApp.start();\n\nBackbone.Highway.start({\n  dispatcher: App.vent\n});</code></pre>\n\n  <h2>\n    <a id=\"trigger-declaration\" class=\"anchor\" href=\"#trigger-declaration\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Trigger declaration\n  </h2>\n  <p>Triggers can be declared in different ways.</p>\n  <p>As a simple <code class=\"language-javascript\">String</code>:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('home', {\n  path: '/',\n  before: [\n    'core',\n    'module',\n    'submodule'\n  ],\n  action: function () {}\n});\n  </code></pre>\n\n  <p>They can also be declared as an object with different parameters:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('home', {\n  path: '/',\n  before: [\n    { name: 'core', cache: true },\n    { name: 'module', args: ['foo', 'bar'] },\n    'submodule'\n  ],\n  action: function () {}\n});\n  </code></pre>\n\n  <p><strong>Most importantly:</strong> Each declared route becomes a trigger itself so that routes can build on each other.</p>\n\n  <h2>\n    <a id=\"catching-client-side-404-and-403\" class=\"anchor\" href=\"#catching-client-side-404-and-403\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Catching client-side 404 and 403\n  </h2>\n\n  <p>A route named 404 can be declared to catch all non-existent routes.\n  In the same way a route can be named 403 to catch accessing restricted routes.</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('404', {\n  action: function (path) {\n    // Couldn't find what you're looking for =/\n  }\n});\n\n// 403 controller\nBackbone.Highway.route('403', {\n  action: function (path) {\n    // Sorry you can't access this content =(\n  }\n});</code></pre>\n\n  <p>For convenience, the action methods will receive the current <code class=\"language-javascript\">window.location.pathname</code> as the first argument.</p>\n  <p>The 404 controller will also be executed when a non-existent route is called with the <code class=\"language-javascript\">go</code> method.</p>\n  <p>The 403 controller will only be executed if the <code class=\"language-javascript\">redirectToLogin</code> option is set to <code class=\"language-javascript\">false</code>.</p>\n\n\n  <h2>\n    <a id=\"secured-routes\" class=\"anchor\" href=\"#secured-routes\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Secured routes\n  </h2>\n  <p>Each route can receive an <code class=\"language-javascript\">authed</code> boolean parameter to declare if the route should be interpreted when the user is logged in or not.</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('admin.users', {\n  path: '/admin/users',\n  authed: true,\n  action: function () {\n    // Display list of users\n  }\n});\n  </code></pre>\n\n  <p>To make a route be interpreted in both cases (i.e. when the user is logged in or logged out),\n  simply leave out the <code class=\"language-javascript\">authed</code> parameter in the route declaration.</p>\n  <p><strong>Important</strong></p>\n  <p>Only the server has the authority to tell if a connected client is a logged in user or not.\n  So for this system to actually work, the server has to print out a small piece of JavaScript to tell the router the current client's state:</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;script type=\"text/javascript\" src=\"backbone.highway.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\nwindow.LOGGED_IN = &lt;?php if ($_SESSION['LOGGED_IN']): ?&gt;true&lt;?php else: ?&gt;false&lt;?php endif; ?&gt;;\n\n$(funtion () {\n  // Starting the router telling it if the user is logged in or not\n  Backbone.Highway.start({\n    authed: window.LOGGED_IN\n  });\n});\n&lt;/script&gt;\n  </code></pre>\n\n  <h2>\n  <a id=\"demo--example\" class=\"anchor\" href=\"#demo--example\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Demo / Example</h2>\n\n  <p>A demo is available in the <code class=\"language-javascript\">demo</code> folder.</p>\n\n  <p>Use npm and bower to install dependencies and grunt to launch the demo server.</p>\n\n  <pre class=\"line-numbers\"><code class=\"language-javascript\">\n~/backbone-highway$ npm install &amp;&amp; bower install\n~/backbone-highway$ grunt serve</code></pre>\n\n  <!-- <h2>\n  <a id=\"license\" class=\"anchor\" href=\"#license\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n  <p>The MIT License (MIT)</p>\n\n  <p>Copyright (c) 2015 d4f</p>\n\n  <p>Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:</p>\n\n  <p>The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.</p>\n\n  <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.</p> -->\n</section>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/header.dust
(function(){dust.register("templates/header",body_0);function body_0(chk,ctx){return chk.w("<div class=\"title-container\">\n  <a href=\"/\" data-route=\"home\" class=\"home-link clearfix\">\n    <img src=\"/backbone-highway/images/backbone-router-logo.png\" alt=\"logo\" title=\"\">\n    <div class=\"title-inner\">\n      <h1>Backbone.Highway</h1>\n      <h2>Routing Backbone with style \\o/</h2>\n    </div>\n  </a>\n</div>\n\n<div data-ui=\"nav\" class=\"nav-container\"></div>\n\n<!-- <section id=\"downloads\">\n  <a href=\"https://github.com/d4f/backbone-router/zipball/master\" class=\"btn\">Download as .zip</a>\n  <a href=\"https://github.com/d4f/backbone-router/tarball/master\" class=\"btn\">Download as .tar.gz</a>\n  <a href=\"https://github.com/d4f/backbone-router\" class=\"btn btn-github\"><span class=\"icon\"></span>View on GitHub</a>\n</section> -->\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/home.dust
(function(){dust.register("templates/home",body_0);function body_0(chk,ctx){return chk.w("<section id=\"main_content\">\n  <p><code class=\"language-javascript\">Backbone.Highway</code> wraps the <code class=\"language-javascript\">Backbone.Router</code> to simplify its use and bring new functionalities.</p>\n  <p>Added functionalities compared to the <code class=\"language-javascript\">Backbone.Router</code> are:</p>\n\n  <ul>\n    <li>Named routes</li>\n    <li>Multiple controllers for a same route</li>\n    <li>Aliasing between routes</li>\n    <li>Before and After triggers distributed using an event aggregator</li>\n    <li>Simple trigger cache management</li>\n    <li>Secured routes</li>\n    <li>Close action (similar to onbeforeunload)</li>\n  </ul>\n\n  <p>\n    Seems like something you would like, right?! Then <a href=\"/getting-started\" data-route=\"getting-started\">let's get started</a>!\n  </p>\n  <p>\n    Or you can jump right in to the <a href=\"/api\" data-route=\"api\">API documentation</a> for more precise information.\n  </p>\n  <h4>Note:</h4>\n  <p>\n    This documentation is a draft. A lot remains to be done, but at least it does not contain less information than what\n    was documented before. If you feel that I have missed something essential that was documented before, you can still access\n    the old readme here: <a href=\"\">Old readme</a>. Any feedback is welcome.\n  </p>\n  <p>\n    Cheers,\n  </p>\n  <p>\n    <a href=\"mailto:rascarlito@gmail.com\">@rascarlito</a>\n  </p>\n\n</section>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/layout.dust
(function(){dust.register("templates/layout",body_0);function body_0(chk,ctx){return chk.w("<header data-ui=\"header\" class=\"clearfix\"></header>\n<div data-ui=\"content\" class=\"container\"></div>\n<footer data-ui=\"footer\"></footer>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_applyStoredRoute.dust
(function(){dust.register("templates/methods/_applyStoredRoute",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._applyStoredRoute();</h3>\n\n<p>\n  Reload the route that was stored before redirecting to login controller\n</p>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_cacheTrigger.dust
(function(){dust.register("templates/methods/_cacheTrigger",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._cacheTrigger( trigger );</h3>\n\n<p>\n  Set a triggers cache state\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>trigger (Object):</b> Trigger object definition\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_checkPath.dust
(function(){dust.register("templates/methods/_checkPath",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._checkPath( path );</h3>\n\n<p>\n  Validate that a path does not contain any <code class=\"language-javascript\">:namedParam</code>\n  or <code class=\"language-javascript\">*splatParam</code>\n</p>\n<p>\n  Throws a <code class=\"language-javascript\">ReferenceError</code> if a mandatory parameter\n  has not been fulfilled.\n</p>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway._checkPath('/users/:id');\n// >> Throws ReferenceError\n\nBackbone.Highway._checkPath('/users/42');\n// >> true</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_clearStore.dust
(function(){dust.register("templates/methods/_clearStore",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._clearStore();</h3>\n\n<p>\n  Clear the route from <code>localStorage</code> that has previously been stored using <code>Backbone.Highway._storeCurrentRoute()</code>.\n</p>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_exists.dust
(function(){dust.register("templates/methods/_exists",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._exists( params );</h3>\n\n<p>\n  Check if a route exists by its name or its path. If anything else than an object is passed it will return <code>false</code>\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>params (Object):</b> Object containing with a <i>name</i> or <i>path</i> key\n  </li>\n</ul>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('home', {\n  path: '/',\n  action: function () {\n    // ...\n  }\n});\n\nBackbone.Highway._exists({ name: 'home' });\n// >> true\n\nBackbone.Highway._exists({ path: '/' });\n// >> true\n\nBackbone.Highway._exists({ name: 'some-inexisting-name' });\n// >> false</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_extractParameters.dust
(function(){dust.register("templates/methods/_extractParameters",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._extractParameters( name, path );</h3>\n\n<p>\n  Extract parameters from the path of a route. Build on top of <code>Backbone.Router.prototype._extractParameters()</code>.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>name (String):</b> The name of the route\n  </li>\n  <li>\n    <b>path (String):</b> The path from which the parameters should be extracted\n  </li>\n</ul>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('user.edit', {\n  path: '/users/:id',\n  action: function (userId) {\n    // ...\n  }\n});\n\nBackbone.Highway._extractParameters('user.edit', '/users/42');\n// >> ['42']</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_findCachedTrigger.dust
(function(){dust.register("templates/methods/_findCachedTrigger",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._findCachedTrigger( trigger );</h3>\n\n<p>\n  Find a cached trigger.<br>\n  If it does not exist it will be created automatically.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>trigger (Object):</b> Trigger object definition\n  </li>\n</ul>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('home', {\n  path: '/',\n  before: [{\n    name: 'core:render',\n    args: [/* List of arguments */],\n    cache: true\n  }],\n  action: function () {\n    // ...\n  }\n});\n\nBackbone.Highway.go('home');\n\nBackbone.Highway._findCachedTrigger({ name: 'core:render' });\n// >> { name: 'core:render', args: [ ... ], cache: true }</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_getStoreKey.dust
(function(){dust.register("templates/methods/_getStoreKey",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._getStoreKey( key );</h3>\n\n<p>\n  Generate a complete store key using the prefix in the options.\n</p>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway._getStoreKey('path');\n// >> 'backbone-highway:path'</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_getStoredRoute.dust
(function(){dust.register("templates/methods/_getStoredRoute",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._getStoredRoute();</h3>\n\n<p>\n  Retrieve the route that has been stored to the <code>localStorage</code>, if any.\n</p>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Write example</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_hasDispatcher.dust
(function(){dust.register("templates/methods/_hasDispatcher",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._hasDispatcher();</h3>\n\n<p>\n  Determine if a dispatcher (event aggregator) was passed with the options when the router was started.<br>\n  Checks if <code>Backbone.Highway.dispatcher</code> exists and if <code>Backbone.Highway.dispatcher.trigger</code> is a method.\n</p>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.start({\n  dispatcher: _.extend({}, Backbone.Events);\n});\n\nBackbone.Highway._hasDispatcher();\n// >> true</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_httpError.dust
(function(){dust.register("templates/methods/_httpError",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._httpError( code );</h3>\n\n<p>\n  Trigger an error controller if it was defined using the <code>Backbone.Highway.route()</code> method.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>code (String/Number):</b> 403 or 404\n  </li>\n</ul>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Define a client-side 404 controller\nBackbone.Highway.route('404', {\n  action: function () {\n    // Display error message\n  }\n})\n\n// Execute 404 controller\nBackbone.Highway._httpError(404);</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_isValidArgsArray.dust
(function(){dust.register("templates/methods/_isValidArgsArray",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._isValidArgsArray( args );</h3>\n\n<p>\n  Check if parameter is a valid arguments array sanitizing it before hand.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>args (Array):</b> Arguments array\n  </li>\n</ul>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Write example</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_name.dust
(function(){dust.register("templates/methods/_name",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._name( path );</h3>\n\n<p>\n  Retrieve the name of a route by it's path.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>path (String):</b> The route path.\n  </li>\n</ul>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('user.edit', {\n  path: '/users/:id/edit',\n  action: function () {\n    // ...\n  }\n});\n\nBackbone.Highway._name('/users/42/edit');\n// >> 'user.edit'</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_parse.dust
(function(){dust.register("templates/methods/_parse",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._parse( path [, args ] );</h3>\n\n<p>\n  Parse a path to inject a list of arguments into the path.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>path (String):</b> The path to be parsed\n  </li>\n  <li>\n    <b>args (Array):</b> Optional arguments to inject into the path\n  </li>\n</ul>\n\n<h4>Example:</h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway._parse('/users/:id/edit', [42]);\n// >> '/users/42/edit'\n\nBackbone.Highway._parse('/users(/:id)');\n// >> '/users'\n</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_path.dust
(function(){dust.register("templates/methods/_path",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._path( name );</h3>\n\n<p>\n  Retrieve the path of a route by it's name.<br>\n  Returns the raw route path or false if the route doesn't exist.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>name (String):</b> The route name\n  </li>\n</ul>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>name (String):</b> The route name\n  </li>\n</ul>\n\n<h4>Example:</h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.route('user.edit', {\n  path: '/users/:id/edit',\n  action: {\n    // ...\n  }\n});\n\nBackbone.Highway._path('user.edit');\n// >> '/users/:id/edit'</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_processControllers.dust
(function(){dust.register("templates/methods/_processControllers",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._processControllers( def [, isTrigger ] );</h3>\n\n<p>\n  Process a list of controllers.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>dev (Object):</b> Definition of the controllers to process\n  </li>\n  <li>\n    <b>isTrigger (Boolean):</b> Is the controller being processed as a trigger\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_processTrigger.dust
(function(){dust.register("templates/methods/_processTrigger",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._processTrigger( trigger, routeArgs );</h3>\n\n<p>\n  Process a single trigger.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>trigger (Mixed):</b> String or Object describing the trigger\n  </li>\n  <li>\n    <b>routeArgs (Array):</b> Route arguments\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_processTriggers.dust
(function(){dust.register("templates/methods/_processTriggers",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._processTriggers( triggers, routeArgs );</h3>\n\n<p>\n  Process a list of triggers.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>triggers (Array):</b> List of Strings or Objects describing the triggers\n  </li>\n  <li>\n    <b>routeArgs (Array):</b> Route arguments\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_replaceArg.dust
(function(){dust.register("templates/methods/_replaceArg",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._replaceArg( path, arg );</h3>\n\n<p>\n  Replace a named/splat parameter in a path\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>path (String):</b> The path that needs a parameter to be replaced\n  </li>\n  <li>\n    <b>arg (Mixed):</b> The data to inject in the path\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_routeToRegExp.dust
(function(){dust.register("templates/methods/_routeToRegExp",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._routeToRegExp( path );</h3>\n\n<p>\n  Transform a route path to a regular expression.<br>\n  Uses the <code>Backbone.Router.prototype._routeToRegExp</code> internally.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>path (String):</b> The route path\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_sanitizeArgs.dust
(function(){dust.register("templates/methods/_sanitizeArgs",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._sanitizeArgs( args );</h3>\n\n<p>\n  Clean arguments array.<br>\n  Removes <code>null</code> and <code>undefined</code> entries from the arguments array.<br>\n  If the <code>args</code> passed is not an <code>Array</code> it will be converted to an array.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>args (Mixed):</b> An array of arguments to clean or a value that will be converted to an array\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_startHistory.dust
(function(){dust.register("templates/methods/_startHistory",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._startHistory();</h3>\n\n<p>\n  Start Backbone.History if it hasn't been done yet.<br>\n  Will trigger a client-side 404 if the loading route doesn't exist.\n</p>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_storeCurrentRoute.dust
(function(){dust.register("templates/methods/_storeCurrentRoute",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._storeCurrentRoute();</h3>\n\n<p>\n  Store the current pathname in the local storage.\n</p>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/_stripHeadingSlash.dust
(function(){dust.register("templates/methods/_stripHeadingSlash",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway._stripHeadingSlash( path );</h3>\n\n<p>\n  Remove heading slash or pound sign from a path, if any.\n</p>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway._stripHeadingSlash('/user/:id/edit');\n// >> user/:id/edit</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/backbone-methods.dust
(function(){dust.register("templates/methods/backbone-methods",body_0);function body_0(chk,ctx){return chk.w("<h3>Original Backbone.Router methods</h3>\n\n<h4>Backbone.Highway.on()</h4>\n\n<p>\n  Listen to a router event.\n</p>\n\n<h4>Backbone.Highway.off()</h4>\n\n<p>\n  Stop listening to a router event.\n</p>\n\n<h4>Backbone.Highway.trigger()</h4>\n\n<p>\n  Manually trigger a router event.\n</p>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/clearCache.dust
(function(){dust.register("templates/methods/clearCache",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway.clearCache();</h3>\n\n<p>\n  Empty all the triggers that have been cached\n</p>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/go.dust
(function(){dust.register("templates/methods/go",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway.go( name [, args [, options ]] );</h3>\n\n<p>\n  Navigates the user to the given route using the route name or path\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>name (Mixed):</b> The name of the route or an object describing the route\n  </li>\n  <li>\n    <b>args (Array):</b> List of parameters to be injected into the route path\n  </li>\n  <li>\n    <b>options (Object):</b> Route execution options\n  </li>\n</ul>\n\n<p>\n  The <code class=\"language-javascript\">name</code> argument can either be the route name\n  as declared with the <code class=\"language-javascript\">route</code> method or\n  an object describing the route\n</p>\n<p>\n  The <code class=\"language-javascript\">args</code> array will be mapped onto\n  each dynamic argument declared in the route path.\n</p>\n<p>\n  The last argument, <code class=\"language-javascript\">options</code>, is passed to the\n  <code class=\"language-javascript\">Backbone.Router</code> to change the behavior of the executed route\n  as described in the <a href=\"#\">Backbone documentation</a>.\n</p>\n\n<h4>Example of navigating with a route name or path:</h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Declare a route\nBackbone.Highway.route('user.edit', {\n  path: '/user/:id/edit',\n  action: function (userId) {\n    // Render user edit page\n  }\n});\n\n// ...\n\n// Navigate to the route using the name\nBackbone.Highway.go('user.edit', [42]);\n\n// Other way of navigating using the name\nBackbone.Highway.go({\n  name: 'user.edit',\n  args: [42]\n});\n\n// Navigate to the route using the path\nBackbone.Highway.go({\n  path: '/user/42/edit'\n});</code></pre>\n\n<h4>Default options passed to Backbone.Router:</h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n{\n  // Execute the route controller\n  trigger: true,\n  // Replace the current history entry if set to true\n  replace: false\n}</code></pre>\n\n<h4>Example using the options object</h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.go('user.edit', [42], {\n  // Replace the current history entry\n  replace: true\n});</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/map.dust
(function(){dust.register("templates/methods/map",body_0);function body_0(chk,ctx){return chk.w("<h3>\n  Backbone.Highway.map( method );\n  <span class=\"aliases\">Aliases: define, declare</span>\n</h3>\n\n<p>\n  Takes a function as its only argument which will be executed in\n  <code class=\"language-javascript\">Backbone.Highway</code>'s context\n  to simplify access to the API.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>method (Function):</b> Method executed in the router context\n  </li>\n</ul>\n\n<h4>Example:</h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\nBackbone.Highway.map(function () {\n  this.route('home', {\n    path: '/',\n    action: function () {\n      // Render home page\n    }\n  });\n\n  this.route('user.edit', {\n    path: '/user/:id/edit',\n    action: function (userId) {\n      // Render user edit page\n    }\n  });\n});</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/route.dust
(function(){dust.register("templates/methods/route",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway.route( name, def );</h3>\n\n<p>\n  Declare a route to the <code class=\"language-javascript\">Backbone.Highway</code> router.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>name (String):</b> The unique name of the route\n  </li>\n  <li>\n    <b>def (Object):</b> Definition of the route\n  </li>\n</ul>\n\n<p>\n  A route consists of a unique name and a definition object.\n  The definition will declare, among other things, the path to which the route will respond, the controller method which\n  will be executed, events which will be triggered (if using a global event aggregator).\n</p>\n<p>\n  In the route definition object, the <code class=\"language-javascript\">path</code>\n  and <code class=\"language-javascript\">action</code> keys are mandatory for the route to work.\n</p>\n<p>\n  The <code class=\"language-javascript\">before</code> and\n  <code class=\"language-javascript\">after</code> parameters will only work if an event aggregator\n  (such as <code class=\"language-javascript\">Backbone.Events</code> or <code class=\"language-javascript\">Backbone.Wreqr</code>)\n  is passed to the router <code class=\"language-javascript\">start</code>\n  via the <code class=\"language-javascript\">dispatcher</code> option.\n</p>\n\n<h4>A very complete example:</h4>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Definition object for a route named 'user.edit'\nBackbone.Highway.route('user.edit', {\n  // Path with an 'id' parameter\n  path: '/user/:id/edit',\n\n  // Route will only be executed if the user is logged in\n  authenticated: true,\n\n  // Execute triggers before the 'action' controller\n  before: [\n    { name: 'core.display', cache: true },\n    'users:display'\n  ],\n\n  // Main controller for the route\n  action: function (userId) {\n    // Render a user edit form\n  },\n\n  // Execute triggers after the 'action' controller\n  after: [\n    'core.postTriggers'\n  ],\n\n  // Executed when user is routed away from this route\n  // similar to an 'onbeforeunload' event\n  close: function () {\n    // Return false to cancel the routing\n    return confirm('Are you sure you want to leave this page?');\n  }\n});</code></pre>\n\n<h4>Calling this route:</h4>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Routing to path with path /user/42/edit\nBackbone.Highway.go('user.edit', [42]);</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/methods/start.dust
(function(){dust.register("templates/methods/start",body_0);function body_0(chk,ctx){return chk.w("<h3>Backbone.Highway.start( [ options ] );</h3>\n\n<p>\n  Starts the router after having declared routes using the <code class=\"language-javascript\">Backbone.Highway.route</code> method.\n</p>\n\n<h4>Arguments:</h4>\n<ul>\n  <li>\n    <b>options (Object):</b> Optional parameters to override default router configuration\n  </li>\n</ul>\n\n<p>\n  This method should be called after all the routes have been declared as they will fire immediatelly (if a route matches the current URL).\n</p>\n<p>\n  Routes can be declared after <code class=\"language-javascript\">Backbone.Highway</code> has been started, but those routes\n  will not trigger on first load. The only way to trigger them will be to use the <code class=\"language-javascript\">go</code> method.\n</p>\n<p>\n  An event aggregator can be passed via the <code class=\"language-javascript\">dispatcher</code>\n  option so that routes will be able to declare custom events which will be triggered before or after\n  the controller method. See the <code class=\"language-javascript\">route</code> method documentation\n  for more information on using triggers.\n</p>\n\n<h4>Example using the default parameters:</h4>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">\n// Start the router\nBackbone.Highway.start({\n  // #### Backbone History options\n  // Docs: http://backbonejs.org/#History\n\n  // Use html5 pushState\n  pushState: true,\n\n  // Root url for pushState\n  root: '',\n\n  // Set to false to force page reloads for old browsers\n  hashChange: true,\n\n  // Don't trigger the initial route\n  silent: false,\n\n  // #### Backbone.Highway specific options\n\n  // Event aggregator used to dispatch triggers\n  dispatcher: null,\n\n  // The current user status, logged in or not\n  authenticated: false,\n\n  // Enable automatic execution of a login route when accessing a secured route\n  redirectToLogin: false,\n\n  // Names of automatically executed routes\n  routes: {\n    login: 'login',\n    error404: '404',\n    error403: '403'\n  },\n\n  // Local storage\n  store: {\n    prefix: 'backbone-highway',\n    separator: ':'\n  },\n\n  // Print out debug information\n  debug: false,\n\n  // Override log method\n  log: function () {\n    if (this.debug && window.console && window.console.log) {\n      window.console.log.apply(window.console, arguments);\n    }\n  }\n});</code></pre>\n");}body_0.__dustBody=!0;return body_0;})();
 // templates/nav.dust
(function(){dust.register("templates/nav",body_0);function body_0(chk,ctx){return chk.w("<ul>\n  <li>\n    <a href=\"/getting-started\" data-route=\"getting-started\">\n      <span>Getting started</span>\n    </a>\n  </li>\n  <li>\n    <a href=\"/api\" data-route=\"api\">\n      <span>API</span>\n    </a>\n  </li>\n  <li>\n    <a href=\"/docs/backbone.highway.html\">\n      <span>Annotated Source</span>\n    </a>\n  </li>\n</ul>\n");}body_0.__dustBody=!0;return body_0;})();
